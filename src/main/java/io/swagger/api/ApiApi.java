/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.Commission;
import io.swagger.model.Error;
import io.swagger.model.ExchangeRate;
import io.swagger.model.ExchangeRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-02-17T21:47:54.178Z")

@Api(value = "api", description = "the api API")
public interface ApiApi {

    @ApiOperation(value = "Запрос обмена валют", nickname = "exchangeUsingPOST", notes = "", response = ExchangeRequest.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "exchange", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ExchangeRequest.class),
        @ApiResponse(code = 400, message = "Error", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/api/exchange",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ExchangeRequest> exchangeUsingPOST(@ApiParam(value = "exchangeRequest" ,required=true )  @Valid @RequestBody ExchangeRequest exchangeRequest);


    @ApiOperation(value = "Получить все курсы обмена валют", nickname = "getAllRatesUsingGET", notes = "", response = ExchangeRate.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "exchange-rates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ExchangeRate.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/api/exchange-rates",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ExchangeRate>> getAllRatesUsingGET();


    @ApiOperation(value = "Получить список установленных комиссий", nickname = "getCommissionsUsingGET", notes = "", response = Commission.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "commissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Commission.class, responseContainer = "Map"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/api/commissions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, Commission>> getCommissionsUsingGET();


    @ApiOperation(value = "Установить значение комиссии для валютной пары", nickname = "setCommissionUsingPOST", notes = "", response = Commission.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "commissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Commission.class),
        @ApiResponse(code = 400, message = "Error", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/api/commissions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Commission> setCommissionUsingPOST(@ApiParam(value = "commission" ,required=true )  @Valid @RequestBody Commission commission);


    @ApiOperation(value = "Установить курс обмена валют по валютной паре. Курс обртаной пары жолжен быть установлен автоматически.", nickname = "setRateUsingPOST", notes = "", response = ExchangeRate.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "exchange-rates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ExchangeRate.class),
        @ApiResponse(code = 400, message = "Error", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/api/exchange-rates",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ExchangeRate> setRateUsingPOST(@ApiParam(value = "", allowableValues = "EUR, USD, UAH, RUB") @Valid @RequestParam(value = "from", required = false) String from,@ApiParam(value = "") @Valid @RequestParam(value = "key", required = false) String key,@ApiParam(value = "") @Valid @RequestParam(value = "rate", required = false) BigDecimal rate,@ApiParam(value = "", allowableValues = "EUR, USD, UAH, RUB") @Valid @RequestParam(value = "to", required = false) String to);

}
